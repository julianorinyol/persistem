
<div class='container col-md-5'>

<div id'top-row'>
  <a href="/notes"><h2>persistem</h2></a>
  <small>
    <% if current_user %>
    Signed in as <%= current_user.email %> (<%= link_to "Log out", session_path("current"), method: :delete %>)
    <% else %>
    <%= link_to "Log In", new_session_path %> | <%= link_to "Sign Up", new_user_path %>
    <% end %>
    <%= link_to 'Generate Quiz', new_quiz_path %>
    <p id='generate-quiz-btn'>Generate Quiz</p>
    <a id='sync-button'>Sync With Evernote</a>


  </small>
</div>  

<ul id='notelist-tabs'class='nav nav-pills'><!---->
  <li role='presentation' class="active"><a id='note-list-tab'>Your Notes</a></li>
  <li role='presentation'><a id='notebook-list-tab'>Notebooks</a></li>
  <li role='presentation'><a id='quiz-tab'>Quizzes</a></li>
</ul>

<div id='table-container'>
  <table id='private-notes-list'class = 'table'>
  <thead>
    <tr id='table-headers'>
        <th><strong id='table-header1'>Title</strong></th><th><strong id='table-header2'>Notebook</strong></th>
    </tr>
  </thead>

  <tbody>
  </tbody>
</table>
</div>

 <%= link_to 'Download CSV list of your notes', notes_path(format: :csv) %>
<% if !session[:authtoken] && @current_user %>
 <%= link_to 'Login via Evernote', '/auth/evernote' %>
<% end %>
<% if @current_user && session[:authtoken] %>
  <p>You have authenticated with Evernote.</p>
<% else %>
  <p>Login to your persistem account to authenticate with Evernote.</p>
<% end %>
<br>
</div>



<!-- ********************************************************************************************* -->


<script>
var notebooks = <%= raw @my_notebooks.to_json %>;
var myNotes = <%= raw @my_notes.to_json %>;

function displayNotes(notes, notebooks) {
  $('#private-notes-list tbody').html('');
  for(var i = 0; i < notes.length; i++) {
    note = notes[i];
    notebook = getNotebookFromNote(note, notebooks);
    var trInnards = generateRow([note.title, notebook.title], ["class", "clickable-tr"], ["data-link",'/notes/' + note.id] );
    tr = $(trInnards);
    tr.appendTo($('#private-notes-list tbody'));
  }
}
function displayNotebooks(notes, notebooks) {
  for(var i = 0; i < notebooks.length; i++) {
    notebook = notebooks[i];
    var trInnards = generateRow([notebook.title, getNumberOfNotesInNotebook(notes,notebook)], ['class', 'bla-class'], ['id','bla'+i], ["data-link", "''"]);
    tr = $(trInnards);
    tr.appendTo($('#private-notes-list tbody'));

    $("#bla" + i).on('click',function(){
      var id = $(this).attr('id')[3]; 
      displayNotesForNotebook(myNotes, notebooks[id]);
    })
  }

  $(".bla-class").on('mouseenter', function() {
    $(this).css({"background":"purple", 'color':'white'});
  })
  $(".bla-class").on('mouseleave', function() {
    $(this).css({"background":"white",'color':'black'});
  })
} 

function displayNotesForNotebook(notes, notebook){
  $('#private-notes-list tbody').html('');
  notebooksNotes = getNotesForNotebook(notes, notebook);
  for(var i = 0; i < notebooksNotes.length; i++) {
    note = notebooksNotes[i];
    var trInnards = generateRow([note.title, notebook.title], ['class', 'clickable-tr'], ['data-link','/notes/' + note.id]);
    tr = $(trInnards);
    tr.appendTo($('#private-notes-list tbody'));
  }
  setUpBindings();
}

//display takes  optional extra args... which create element attributes.  ex. ['class', 'testClass'] ---becomes---> class='testClass'
// function display(objArray, rowContentArr) {
//    $('#private-notes-list tbody').html('');
//    var trInnards;
//    for(var i = 2; i < objArray.length; i++) {
//     //using optional extra args...
//     trInnards = generateRow(rowContentArr, arguments[i]);
//     tr = $(trInnards);
//     tr.appendTo($('#private-notes-list tbody'));
//    }
//    setUpBindings();
// }


function displayQuizzes(quizzes) {
   $('#private-notes-list tbody').html('');
  for(var i = 0; i < quizzes.length; i++) {
    quiz = quizzes[i];
    var trInnards = generateRow([timeSince(convertDate(quiz.created_at)) + ' ago', '% answered'], ["class", "clickable-tr"], ["data-link",'/quiz/' + quiz.id] );
    tr = $(trInnards);
    tr.appendTo($('#private-notes-list tbody'));
  }
  setTableHeaders('Date Created', '% Finished');

  setUpBindings();
}

function getQuizzes() {
  $.ajax({
    url: '/quizzes/sync',
    method: 'GET',
    dataType: 'json',
    success: function(res) {
      displayQuizzes(res);
    },
    error: function(err, message) {
      console.log('notebook get ajax failed' + message);
    }
  })
;}

 function generateRow(contentArray) {
   //takes an array of objects {attr: 'class' val: 'my-class'}
   var tr ="<tr";
   var innards = buildInnards(contentArray);
   //using optional extra args...
   for(var i = 1; i < arguments.length; i++) {
    argument = arguments[i];
    tr += " " + argument[0] + "='" + argument[1] + "'";
   }

   tr += ">" + innards + "</tr>";
   return tr;
 
 }
  function buildInnards(contentArray) {
    var content;
    var output = ""
    for(var i = 0; i < contentArray.length; i++) {
      content = contentArray[i];
      output += "<td>"+ content +"</td>"
    }
    return output;
  }

function getNotesForNotebook(notes, notebook) {
  notebooksNotes =[];
  for(var i = 0; i < notes.length; i++) {
    var note = notes[i];
    if( note.notebook_guid == notebook.guid ){
      notebooksNotes.push(note);
    }
  }
  return notebooksNotes;
}

function setCorrectTabActive(){
  if(window.location.href.indexOf('quiz') > 0) {
    getQuizzes();
  } else {
    displayNotes(myNotes, notebooks);
  }
}

function getNumberOfNotesInNotebook(notes, notebook) {
  return getNotesForNotebook(notes, notebook).length;
}

$('#notebook-list-tab, #note-list-tab, #quiz-tab').on('click', function(){
  console.log('clicked');
  $('#notelist-tabs li').removeClass();
  $(this).parent().addClass('active');
  $('#private-notes-list tbody').html('');
})

$('#notebook-list-tab').on('click', function(){
   displayNotebooks(myNotes, notebooks);   
   setUpBindings();
   setTableHeaders('Notebooks', 'Number of Notes');
})
$('#note-list-tab').on('click', function(){
   displayNotes(myNotes, notebooks);
   setTableHeaders('Title', 'Notebook');
   setUpBindings();
})
$('#quiz-tab').on('click', function(){
   getQuizzes();
   setUpBindings();
})

function setTableHeaders() {
  for(var i = 0; i < arguments.length; i++) {
    var arg = arguments[i];
     $('#table-header' + (i + 1)).text(arg);
  }
}

function convertDate(unixDateString) {
  return new Date(unixDateString);
}

function timeSince(date) {

    var seconds = Math.floor((new Date() - date) / 1000);

    var interval = Math.floor(seconds / 31536000);

    if (interval > 1) {
        return interval + " years";
    }
    interval = Math.floor(seconds / 2592000);
    if (interval > 1) {
        return interval + " months";
    }
    interval = Math.floor(seconds / 86400);
    if (interval > 1) {
        return interval + " days";
    }
    interval = Math.floor(seconds / 3600);
    if (interval > 1) {
        return interval + " hours";
    }
    interval = Math.floor(seconds / 60);
    if (interval > 1) {
        return interval + " minutes";
    }
    return Math.floor(seconds) + " seconds";
}


$('#sync-button').on('click', function(){
  console.log('clicked');   
  $.ajax({
    url: '/notebooks/list',
    method: 'GET',
    dataType: 'json',
    success: function(res) {
      notebooks = res;
      callForNotes(res);
    },
    error: function(err, message) {
      console.log('notebook get ajax failed' + message);
    }
  });
});

function getNotebookFromNote(note, notebooks) {
  for(var i = 0; i < notebooks.length; i++) {
    notebook = notebooks[i];
    if(notebook.guid == note.notebook_guid) {
      return notebook;
    }
  }
}

function callForNotes(notebooks){
  $.ajax({
        url: '/notes/sync/evernote',
        method: 'GET',
        dataType: 'json',
        success: function(notes) {
          console.log('ajax success!');
          displayNotes(notes, notebooks);
          setUpBindings();
        },
        error: function(phase, message){
          console.log('ajax post failed', message);
          console.log('ajax post failed');
        }
      });
}
function setUpBindings(){
    $("tr[data-link].clickable-tr").click(function() {
      window.location = $(this).data("link")
    })
    $(".clickable-tr").on('mouseenter', function() {
      $(this).css({"background":"purple", 'color':'white'});
    })
    $(".clickable-tr").on('mouseleave', function() {
      $(this).css({"background":"white",'color':'black'});
    })
}

$('#generate-quiz-btn').on('click', function() {
  $('.right-side-container').html("<p>random questions</p>\n<p>from which time range</p>\n<p>from which notebooks?</p>");
})

setCorrectTabActive();
</script>
